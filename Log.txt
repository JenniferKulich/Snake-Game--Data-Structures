March 17 (Sunday):
	* Downloaded Hinker's startup code
	* Made a new repository (csc315_sp2019_project3)
	* Made first commit of the startup code source

March 18 (Monday):
	* Got the new tar file
	* Got the startup code compiling and running
	* Tried messing around with the code. Have code written for the zig-zag
		pattern- Hamilton patter that just works for even height board
	* Created a zig-zag pattern for an odd board. Works pretty well and long as
		there aren't a lot of blocks in the second to top row.
	* I know I could condense my code a lot more, but I know I can't keep using
		this strategy- I only used it to get used to the code base and how things
		worked. Works well enough for checkpoint 1.

March 19 (Tuesday):
	* Cleaned up the code I wasn't using
	* Waiting to change strategy until we go over more stuff in class

March 23 (Saturday):
	* fixed the driver issue
	* ran the average score
	* going to try to implement a graph

March 24 (Sunday)
	* Add the graph class from the homework.

March 25 (Monday)
	* Added code for BFS that we looked at in class so I can possibly use it later
	* Tried using the BFS class from in class to make sure I could implement it
	* Not quite sure how to be able to use the path list in order to make the
	  moves - I think I could create a constant list in the player class, but I'm
		not sure. I'll be asking Hinker tomorrow

March 26 (Tuesday)
	* Worked on implementing BFS for my snake to use
	* The BFS algorithm won't work because the snake will eventually cut off
		paths to the food while taking the shortest path. However, this will avoid
		obstacles and will hopefully take a smart-ish path. I may be able to use
		this later as part of my final algorithm.

March 27 (Wednesday)
	* Added a graph constructor to the BFS code- that's what was wrong yesterday
	* Rewrote the graph constructor to add the edges correctly. Still working out
		the bugs for BFS.
	* I may possibly write a more simple path finding code for Friday if I don't
		get very far with BFS.
	* Dalton helped look at my code and determine that my BFS constructor wasn't
		actually using the headSpot number, so I had to initialize it

March 28 (Thursday)
	* For some reason, there was a wrong calculation for the movement, and I
		realized I had already done a index calculation and I could just use that.
		Now the snake just runs into itself.
	* I'm thinking of doing something like a BFS/DFS combination. This would help
		the snake not trap itself, and if it does, it'll move around until a
		possible path is cleared.
	* BFS now runs except it will seg fault randomly- 1 to 4 times per 100 rounds.
	* Averages around 30 to 35 with and without obstacles.
	* The snake will run into itself if it thinks there is a path, so I'll have
		to make sure that it doesn't think that it's a path.
	* Will need to add a loitering algorithm if there is no path to the food.
