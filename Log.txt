March 17 (Sunday):
	* Downloaded Hinker's startup code
	* Made a new repository (csc315_sp2019_project3)
	* Made first commit of the startup code source

March 18 (Monday):
	* Got the new tar file
	* Got the startup code compiling and running
	* Tried messing around with the code. Have code written for the zig-zag
		pattern- Hamilton patter that just works for even height board
	* Created a zig-zag pattern for an odd board. Works pretty well and long as
		there aren't a lot of blocks in the second to top row.
	* I know I could condense my code a lot more, but I know I can't keep using
		this strategy- I only used it to get used to the code base and how things
		worked. Works well enough for checkpoint 1.

March 19 (Tuesday):
	* Cleaned up the code I wasn't using
	* Waiting to change strategy until we go over more stuff in class

March 23 (Saturday):
	* fixed the driver issue
	* ran the average score
	* going to try to implement a graph

March 24 (Sunday)
	* Add the graph class from the homework.

March 25 (Monday)
	* Added code for BFS that we looked at in class so I can possibly use it later
	* Tried using the BFS class from in class to make sure I could implement it
	* Not quite sure how to be able to use the path list in order to make the
	  moves - I think I could create a constant list in the player class, but I'm
		not sure. I'll be asking Hinker tomorrow

March 26 (Tuesday)
	* Worked on implementing BFS for my snake to use
	* The BFS algorithm won't work because the snake will eventually cut off
		paths to the food while taking the shortest path. However, this will avoid
		obstacles and will hopefully take a smart-ish path. I may be able to use
		this later as part of my final algorithm.

March 27 (Wednesday)
	* Added a graph constructor to the BFS code- that's what was wrong yesterday
	* Rewrote the graph constructor to add the edges correctly. Still working out
		the bugs for BFS.
	* I may possibly write a more simple path finding code for Friday if I don't
		get very far with BFS.
	* Dalton helped look at my code and determine that my BFS constructor wasn't
		actually using the headSpot number, so I had to initialize it

March 28 (Thursday)
	* For some reason, there was a wrong calculation for the movement, and I
		realized I had already done a index calculation and I could just use that.
		Now the snake just runs into itself.
	* I'm thinking of doing something like a BFS/DFS combination. This would help
		the snake not trap itself, and if it does, it'll move around until a
		possible path is cleared.
	* BFS now runs except it will seg fault randomly- 1 to 4 times per 100 rounds.
	* Averages around 30 to 35 with and without obstacles.
	* The snake will run into itself if it thinks there is a path, so I'll have
		to make sure that it doesn't think that it's a path.
	* Will need to add a loitering algorithm if there is no path to the food.

April 1 (Monday)
	* Had a busy weekend and wasn't able to work on the code at all
	* Should add a check to make sure snake isn't trapping itself. I'll probably
		add some check to make sure it would be able to find its tail again based on
		the path. If a path cannot be found, it'll move around in a smart random
		pattern. I had seen Dalton's move in a zig-zag sort of patter, so that might
		be an option. Either that, or do something like a DFS move.
	* For when there is no path to the food, I may try findind a path to the
		tail and go there in hopes on opening up a way to get to the food.
	* I'm going to try implementing DFS for when the snake would trap itself but
		make the target its tail.
	* Got DFS working, I'm pretty sure. I ran the driver for the obstacle map,
		and my average is 37 with a max of 73, so I assume since my average went up,
		the DFS is working.
	* I'm trying to think how a weighted graph could possibly be implemented. I
		found an implementation where it weighted the adjacent tiles based on how
		far they were from the food tile. I may try something like this once we go
		over weighted graphs more.
		Here's the video for it: https://www.youtube.com/watch?v=-L-WgKMFuhE

April 2 (Tuesday)
	* So the DFS I implemented yesterday wouldn't work at all, and that was
		because if there's no BFS path to the food, there wouldn't be a DFS path.
		I thought about writing a function that would find the tail of the snake and
		try going there. Then I realized that I didn't know how to find the tail of
		the snake and couldn't access the queue for the snake tail. Instead, wrote a
		function that would make valid random moves until a path to the food could
		be found. This will probably trap the snake a some points, but I'm hoping
		that it will be enough to improve my score by a little bit until I can talk
		to someone.
	* The random moves makes my snake kill itself a lot (will core dump), but the
		average on a board with obstacles a 38 with a max of 93. I talked to Dalton,
		and he used the original Manhattan code that Hinker gave us to make
		'random' moves. He also checked to make sure that the move the snake was
		making would not end the game. I'm going to try this.
	* Added documentation and cleaned up the code
	* Average for obstacles is now 41 with a high of 93

April 3 (Wednsday)
	* For some reason, I found that my code wasn't working the way I wanted it to
		when the Manhattan function was called. I spent a lot of time trying to
		debug it, thinking that I just did it wrong. I then realized that this
		only happened when the snake was completely surrounded and trapped. My code
		should have been returning NONE as the move, but it was returning a move and
		causing the core dumps. After debugging for 2-3 hours, I asked Dalton to
		look at my code. He found my error when I was building the graph class.
		Essentially, I was accessing a map item that wasn't there thus causing the
		core dump.
	* 
