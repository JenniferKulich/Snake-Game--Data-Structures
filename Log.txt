March 17 (Sunday):
	* Downloaded Dr.Hinker's startup code
	* Made a new repository (csc315_sp2019_project3)
	* Made first commit of the startup code source

March 18 (Monday):
	* Got the new tar file
	* Got the startup code compiling and running
	* Tried messing around with the code. Have code written for the zig-zag
		pattern- Hamilton patter that just works for even height board
	* Created a zig-zag pattern for an odd board. Works pretty well and long as
		there aren't a lot of blocks in the second to top row.
	* I know I could condense my code a lot more, but I know I can't keep using
		this strategy- I only used it to get used to the code base and how things
		worked. Works well enough for checkpoint 1.

March 19 (Tuesday):
	* Cleaned up the code I wasn't using
	* Waiting to change strategy until we go over more stuff in class

March 23 (Saturday):
	* fixed the driver issue
	* ran the average score
	* going to try to implement a graph

March 24 (Sunday)
	* Add the graph class from the homework.

March 25 (Monday)
	* Added code for BFS that we looked at in class so I can possibly use it later
	* Tried using the BFS class from in class to make sure I could implement it
	* Not quite sure how to be able to use the path list in order to make the
	  moves - I think I could create a constant list in the player class, but I'm
		not sure. I'll be asking Dr. Hinker tomorrow

March 26 (Tuesday)
	* Worked on implementing BFS for my snake to use
	* The BFS algorithm won't work because the snake will eventually cut off
		paths to the food while taking the shortest path. However, this will avoid
		obstacles and will hopefully take a smart-ish path. I may be able to use
		this later as part of my final algorithm.

March 27 (Wednesday)
	* Added a graph constructor to the BFS code- that's what was wrong yesterday
	* Rewrote the graph constructor to add the edges correctly. Still working out
		the bugs for BFS.
	* I may possibly write a more simple path finding code for Friday if I don't
		get very far with BFS.
	* Dalton helped look at my code and determine that my BFS constructor wasn't
		actually using the headSpot number, so I had to initialize it

March 28 (Thursday)
	* For some reason, there was a wrong calculation for the movement, and I
		realized I had already done a index calculation and I could just use that.
		Now the snake just runs into itself.
	* I'm thinking of doing something like a BFS/DFS combination. This would help
		the snake not trap itself, and if it does, it'll move around until a
		possible path is cleared.
	* BFS now runs except it will seg fault randomly- 1 to 4 times per 100 rounds.
	* Averages around 30 to 35 with and without obstacles.
	* The snake will run into itself if it thinks there is a path, so I'll have
		to make sure that it doesn't think that it's a path.
	* Will need to add a loitering algorithm if there is no path to the food.

April 1 (Monday)
	* Had a busy weekend and wasn't able to work on the code at all
	* Should add a check to make sure snake isn't trapping itself. I'll probably
		add some check to make sure it would be able to find its tail again based on
		the path. If a path cannot be found, it'll move around in a smart random
		pattern. I had seen Dalton's move in a zig-zag sort of patter, so that might
		be an option. Either that, or do something like a DFS move.
	* For when there is no path to the food, I may try findind a path to the
		tail and go there in hopes on opening up a way to get to the food.
	* I'm going to try implementing DFS for when the snake would trap itself but
		make the target its tail.
	* Got DFS working, I'm pretty sure. I ran the driver for the obstacle map,
		and my average is 37 with a max of 73, so I assume since my average went up,
		the DFS is working.
	* I'm trying to think how a weighted graph could possibly be implemented. I
		found an implementation where it weighted the adjacent tiles based on how
		far they were from the food tile. I may try something like this once we go
		over weighted graphs more.
		Here's the video for it: https://www.youtube.com/watch?v=-L-WgKMFuhE

April 2 (Tuesday)
	* So the DFS I implemented yesterday wouldn't work at all, and that was
		because if there's no BFS path to the food, there wouldn't be a DFS path.
		I thought about writing a function that would find the tail of the snake and
		try going there. Then I realized that I didn't know how to find the tail of
		the snake and couldn't access the queue for the snake tail. Instead, wrote a
		function that would make valid random moves until a path to the food could
		be found. This will probably trap the snake a some points, but I'm hoping
		that it will be enough to improve my score by a little bit until I can talk
		to someone.
	* The random moves makes my snake kill itself a lot (will core dump), but the
		average on a board with obstacles a 38 with a max of 93. I talked to Dalton,
		and he used the original Manhattan code that Dr. Hinker gave us to make
		'random' moves. He also checked to make sure that the move the snake was
		making would not end the game. I'm going to try this.
	* Added documentation and cleaned up the code
	* Average for obstacles is now 41 with a high of 93

April 3 (Wednesday)
	* For some reason, I found that my code wasn't working the way I wanted it to
		when the Manhattan function was called. I spent a lot of time trying to
		debug it, thinking that I just did it wrong. I then realized that this
		only happened when the snake was completely surrounded and trapped. My code
		should have been returning NONE as the move, but it was returning a move and
		causing the core dumps. After debugging for 2-3 hours, I asked Dalton to
		look at my code. He found my error when I was building the graph class.
		Essentially, I was accessing a map item that wasn't there thus causing the
		core dump.
	* Tried what Dalton was talking about, but it made my code very slow and
		it wasn't working properly, so I reverted back to what I had before, and
		added something more simples. It doesn't core dump anymore and it doesn't
		run as slow.
	* Things to do tomorrow: clean up code and time it

April 4 (Thursday)
	* Cleaned up code that I didn't need
	* I want to try to implement a weighted graph next and then try to implement the
		algorithm from the video mentioned above. I think this will help make my snake a
		a little smarter.
	* Dijkstra's algorithm looks to be very similar to what the video was showing, so I
		may wait until tomorrow when Dr. Hinker shows the code to actually implement anything.
	* Going to add a heap class since that's what we talked about using in class for
		Dijkstra's, and that's what the video was showing to use to optimize their code
	* Added the code from the video to some files just so I can mess around with it and
		see how stuff works. I'm not quite sure how it implements things yet- especially
		the path, and I'm not sure what happens if there's little dead end paths. This
		looks like a more complicated version of Dijkstra's. I'm naming it
		'complicated Dijkstra'

April 7 (Sunday)
		* Worked on trying to get complicated Dijkstra to work. I spent
			quite some time just debugging  it and trying not to get any errors or
			warning. This didn't help because in the video, a list was used, but I
			realized that using a vector would be much better since I needed random
			access. Looking back, a list would have a smaller complexity (an insertion
			in the front for a vector is O(n) while a list would have been O(1)). I
			should definitely change this! However, I also know that for this
			algorithm, it would much cheaper to use a heap, so I may not convert
			everything to lists.
		* Complicated Dijkstra will seg fault when implemented, so I'll have to work
			on that before I start using a heap. I probably don't need to, but I want
			to make sure that I understand what's going on first.
		* I'll investigate tomorrow why this is happening.

April 8 (Monday)
		* Integrated the code from Dr. Hinker so that the graph will not produced a
			biconnected graph.
		* Deleted my complicated Dijkstras code. I realized that it was just not
			going to work- there were too many things wrong with it, and if Dr.Hinker was
			going to put up the code for it, I didn't think it was worth my time.
			Also, what I was doing didn't make a weighted graph class, and at this
			point, I would much rather use that, but I'm not sure how I would put it
			in with my code. Also, it was horribly inefficient especially using
			vectors.
		* I've been thinking about other potential ideas. One of them being a
			strategy where I eat the food and then try to coil my snake up in the
			quadrant it's in as much as I possibly can while still having a path
			to the food. Then, I would take the shortest path to the food and continue
			the process.  I could also coil my way through the quadrants to the food.
			This would work super well on the no obstacle grid but not as much on the
			obstacle one. I could make it potentially work by making sure that the
			next move would still have a path to the food.

April 9 (Tuesday)
	* Tried a new strategy where the snake will take the BFS to the food. It will
		then take BFS to get to the bottom right corner, then the top right corner
		then the top left corner, then the bottom left corner. Once it gets to the
		bottom left corner, it will take BFS to the next food and will loop through
		again. This should help keep the playfield clear up the playfield for the
		snake. If there is food along the BFS path to a corner, the snake will eat
		it and continue on its way to the corner.
	* Problems as of now before I commit code: if there is an obstacle in the
		corner it's trying to go to, the game ends. Sometimes, the snake will trap
		itself in the corner by not being in the top row if possible (fix: do a
		check to make sure the snake cannot move up into top row- or sides too I
		guess).
	* Ideas I have before I commit: Maybe only do this after snake gets a certain
		length????
	* Fixed what to do if there is a block in the corner. Also changed it so that
		the snake will just go to the far right after eating the food instead of
		going to the bottom corner.
	* What to do next: If the snake is not in the top or side rows when it can be,
		that move will override the BFS move.
	* What do to next: If can't find the corner, do Manhattan move

April 10 (Wednesday)
	* I'm going to add code that will use the Manhattan move if it cannot find
		a path.
	* I'm also going to add code that will have the snake move to the top or the
		side rows if it can- this will cause less problems for BFS
	* Quick thought before I commit just so I remember:
		Maybe if can't get to the corner, try to go to the next food and start over
		the loop and if can't get to the food, just loiter with intent to get the
		what opens first- food or corner
	* Added code that will have the snake do the Manhattan route. My average score
		did not go up by much which is concerning to me. I feel like it should have
		gone up by more than one point. I'm going to go through and watch the snake
		play to see where it's going wrong.

	* Ok so an overview of what I did today: I added code that will have the
		snake do a BFS to the food until it reaches a certain length. The length
		will either be the PLAYFIELD_WIDTH or PLAYFIELD_HEIGHT- whichever one is
		shorter. This will make sure that the board will never be split in 2 and
		possibly trap the snake. Even if it were to happen, the Manhattan code is
		in place to help this. (Side note for later: maybe I should do this up until
		I need to use the Manhattan code...). The snake will then go to the right
		wall and hug it until it gets to the top right corner. After that, it'll
		hug the top row until it reaches the top left corner. After that, it'll hug
		the very left column until it reaches the bottom left corner. Then it will
		do a BFS to the food and the cycle will repeat. The goal of this is to keep
		the playfield open when the snake is long. This should help the snake get
		much longer than just straight BFS. I also made my code shorter and in
		separate functions.
	* I thought this would help me get a much higher score. It would make sense
		too, however my driver says that the average is 43 (I think my driver is
		broken though because it does that whether I put in true for obstacles or
		not). I have yet to witness a run where I get a super low score. Maybe I
		just need to run it more. When I've ran it without obstacles, I get in the
		50's every time and nearly above 60 every time. With obstacles, I can almost
		always get into the 50's. I guess I'll just have to run it more without the
		driver. Also, the driver runs super slow. I think this is because of how
		many turns it takes to the edge hugging. Overall, the turn time shouldn't
		be that high. I need to make sure it's below 0.01 though.
	* Ideally, I would like to use a weighted graph, however, I'm still confused
		on how to implement it. I know Dr. Hinker said he would put up code for it,
		so I think it was more worth working on this rather than trying to figure
		out weighted graphs. I know we had an example implementation in the videos
		given to us that was in Java, but they didn't make too much sense in terms
		of implementation.
	* As you've seen, I started working on this yesterday afternoon, and I worked
		on it from 10 this morning until 8 tonight. I've worked pretty hard on this
		and it's really frustrating how little I've improved. I honestly didn't
		mind working on it all day, but I would have liked to have improved more.
		It's days like this that make me think: I like programming but I'm such a
		terrible programmer.
	* For tomorrow:
		Look at the code and try to witness a low score. Maybe the Manhattan isn't
		working for the hugging algorithm? Or it's trapping itself somehow? I guess
		we'll see. I have a few ideas.
		Continue cleaning up code.
		Put functions in private part of class if they're implementation!

April 11 (Thursday)
		* So I ran my code using a driver Dalton gave me. And my scores seemed
			1) much more accurate and 2) they actually changed based on if there were
			obstacle are not. Now without obstacles, my average is 61. And with
			obstacles, it's 51. This is much less frustrating that before.
		* I was also able to test the time it take for each turn and it's 0.0037
			seconds per turn. I was worried it was taking much longer considering how
			long it took for the driver to run. It's probably from what I thought: I
			take so many turns.
		* I changed a couple of lines of code in my hugging wall algorithm. Before
			when it was going to do the Manhattan distance, it was searching for food
			rather than the corner it should have been going to. This should have
			helped the score some.
		* Put functions in the private part of the class. The user does not need
			to use them at all since they're all about determining what move should
			be made based on where the snake is in the game.
		* Cleaned up code (took out commented out code that I forgot about, took out
			a surprising amount of unused variables that were being passed into
			function, made lines less than 80 characters, etc)
		* Added documentation to code.

April 12 (Friday)
	* Added the weighted graph class, edge class, index class, and the Dijkstra's
	  class to my code. I created a separate branch to do this on in case things
	  don't work out. Also, since I'm doing this on a Friday and I don't know if
	  I'll get it done by the time the checkpoint is due, I won't have to worry
	  about the wrong code being pulled.
	* Added a function to the weighted graph class to take in a grid. This was
	  pretty much a copy of my graph class constructor but adding weights of 0
	  to every edge when it's created.
	* Was able to implement the weighted graph class and figure out how to use
		Dijkstra's. This is all being done in the trial branch to avoid me
		messing anything up.
	* Was able to get the edges of the adjacent nodes and do my weight
		calculations. This was only done for the headSpot node, and I haven't tested
		it yet, but it compiles. I would keep working on it, but I'd kind of like
		to get some sleep. Anyway, I don't think implementing the rest should be
		too hard tomorrow.
	* My calculations for the weight - you add the dx and dx for the food and the
		head to adjacent nodes. You then pick the one with the lowest number and
		do the same thing. Eventually you should be able to get a path with the
		lowest weights which is where Dijkstra's comes in. There's obviously more
		details to the implementation, but that's the basic idea of it. This is
		mostly based off of the video I wanted (link above).

April 13 (Saturday)
	* After talking to Dr.Hinker the night before, I would need to make my weighted
		graph class use and return a list of edges for me to use. I spent some
		time working on this, but I coudn't get very far on what needed to be done.

April 14 (Sunday)
	* I hadn't noticed that Dr. Hinker had pushed up code the night before, so I
		kept trying to work on the code. I thought that the addEdge function would
		need to have a list<Edge> passed into it which caused me a massive headache
		trying to work around. It wasn't until late afternoon that I realized code
		had been pushed up. I didn't realize this before because I didn't have
		compiling code, so I had no reason to push or pull from the repo.
	* I now get multiple edges returned which is a big improvement. I hope I can
		do the rest of the work like I planned. Thank you Dr. Hinker for the code.
	* Have my algorithm working now, but it's very messy. I need to go through and
		put things into separate functions. I ran the driver, and I got an average
		of 40 which is pretty good. I don't think my Manhattan code is working, so
		I would need to go through and see why.
	* The more I look at my code, the more I think I really did not do the
		smartest way. I went through each node and create a shortest path. That's
		already an algorithm. I think I just got to wrapped up in what the video I
		had watched had me do.
	* What I think I'm going to try next is just calculating the weight for every
		node on the graph using the algorithm I used before, and let some path
		finding algorithm like Dijkstra's do the work for me instead. I'll need to
		think of some way to weight things uniquely so there aren't two of the same
		lowest weights. Or maybe I'll just let the snake pick one and see how that
		works.
	* Ran the driver on the code I wrote, and the averages are back down to 40
	  for the obstacle board and 43 for the clear board. This clearly did not
		work.

April 15 (Monday)
	* So the algorithm I tried was pretty much a smarter version of BFS. The snake
		may make smarter moves part of the time, but it's really not enough to
		justify using it especially when I already have an algorithm that gets a
		higher average score.
		Because of this, I don't know if I want to try using a weighted graph. I
		want to give it more thought on how/what I could do, but right now, I'm not
		sure. Even after talking to a couple of people, I don't really know what I
		could do.
	* I'm thinking about making my Manhattan move smarter. Currently it will
		sometimes trap itself by wrapping itself into an enclosed circle. Right now
		I'm thinking that I may do something with a weighted graph for this. I may
		weigh the blocks around the tail high and then radiating out low numbers
		so the snake will have an incentive to get away from itself?
		I may also try checking if the snake is splitting the board. If it is and
		the food is on the other side, I may have the snake move away from the
		food until it has a path open.
	* I also need to add a check to my food BFS function. The snake will kill
		itself if the food is in the second to top row and there's an obstacle in
		the top row to the right of it.
